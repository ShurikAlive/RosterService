openapi: 3.0.0
info:
  title: Roster Servise API
  description: This is TEST API for my service
  version: 0.0.1
servers:
- url: http://localhost:8080/
  description: "Optional server description, e.g. Internal staging server for testing"
tags:
- name: roster
  description: Roster info
paths:
  /roster:
    get:
      tags:
      - roster
      summary: Returns a list of available rosters.
      description: Return JSON array of info available rosters.
      responses:
        "200":
          description: A JSON array of user names
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Roster'
                x-content-type: application/json
    post:
      tags:
      - roster
      summary: Add new roster.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RosterInsert'
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: string
                description: ID roster
                example: c01d7cf6-ec3f-47f0-9556-a5d6e9009a43
                x-content-type: application/json
  /roster/{rosterId}:
    get:
      tags:
      - roster
      summary: Returns a roster by ID.
      parameters:
      - name: rosterId
        in: path
        description: ID roster
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: c01d7cf6-ec3f-47f0-9556-a5d6e9009a43
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Roster'
    put:
      tags:
      - roster
      summary: Edit roster by ID.
      parameters:
      - name: rosterId
        in: path
        description: ID roster
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: c01d7cf6-ec3f-47f0-9556-a5d6e9009a43
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RosterEdit'
        required: true
      responses:
        "201":
          description: Update
          content:
            application/json:
              schema:
                type: string
                description: ID roster
                example: c01d7cf6-ec3f-47f0-9556-a5d6e9009a43
                x-content-type: application/json
    delete:
      tags:
      - roster
      summary: Delete roster by ID.
      parameters:
      - name: rosterId
        in: path
        description: ID roster
        required: true
        style: simple
        explode: false
        schema:
          type: string
          example: c01d7cf6-ec3f-47f0-9556-a5d6e9009a43
      responses:
        "201":
          description: Delete
          content:
            application/json:
              schema:
                type: string
                description: ID roster
                example: c01d7cf6-ec3f-47f0-9556-a5d6e9009a43
                x-content-type: application/json
components:
  schemas:
    Equipment:
      required:
      - id
      properties:
        id:
          type: string
          description: ID equipment
          example: c01d7cf6-ec3f-47f0-9556-a5d6e9009a43
      example:
        id: c01d7cf6-ec3f-47f0-9556-a5d6e9009a43
    Unit:
      required:
      - equipments
      - id
      properties:
        id:
          type: string
          description: ID unit
          example: c01d7cf6-ec3f-47f0-9556-a5d6e9009a43
        equipments:
          type: array
          items:
            $ref: '#/components/schemas/Equipment'
      example:
        equipments:
        - id: c01d7cf6-ec3f-47f0-9556-a5d6e9009a43
        - id: c01d7cf6-ec3f-47f0-9556-a5d6e9009a43
        id: c01d7cf6-ec3f-47f0-9556-a5d6e9009a43
    Roster:
      required:
      - id
      - idUser
      - name
      - units
      properties:
        id:
          type: string
          description: ID roster
          example: c01d7cf6-ec3f-47f0-9556-a5d6e9009a43
        name:
          type: string
          description: NAME roster
          example: Alpha FireTeam
        idUser:
          type: string
          description: ID user
          example: c01d7cf6-ec3f-47f0-9556-a5d6e9009a43
        units:
          type: array
          items:
            $ref: '#/components/schemas/Unit'
      example:
        idUser: c01d7cf6-ec3f-47f0-9556-a5d6e9009a43
        name: Alpha FireTeam
        id: c01d7cf6-ec3f-47f0-9556-a5d6e9009a43
        units:
        - equipments:
          - id: c01d7cf6-ec3f-47f0-9556-a5d6e9009a43
          - id: c01d7cf6-ec3f-47f0-9556-a5d6e9009a43
          id: c01d7cf6-ec3f-47f0-9556-a5d6e9009a43
        - equipments:
          - id: c01d7cf6-ec3f-47f0-9556-a5d6e9009a43
          - id: c01d7cf6-ec3f-47f0-9556-a5d6e9009a43
          id: c01d7cf6-ec3f-47f0-9556-a5d6e9009a43
    RosterInsert:
      required:
      - idUser
      - name
      - units
      properties:
        name:
          type: string
          description: NAME roster
          example: Alpha FireTeam
        idUser:
          type: string
          description: ID user
          example: c01d7cf6-ec3f-47f0-9556-a5d6e9009a43
        units:
          type: array
          items:
            $ref: '#/components/schemas/Unit'
    RosterEdit:
      required:
      - name
      - units
      properties:
        name:
          type: string
          description: NAME roster
          example: Alpha FireTeam
        units:
          type: array
          items:
            $ref: '#/components/schemas/Unit'
